apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    {{- include "minio.labels" . | nindent 6 }}
  name: minio
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "minio.labels" . | nindent 6 }}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: minio
    spec:
      containers:
        - command:
            - bash
            - -c
            - mkdir -p "$${1}/{{ .Values.service.bucketName }}" && exec minio server --console-address ":9001" "$${1}"
            - --
            - /tmp/minio
          env:
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.service.secretAccessKeySecret.name }}
                  key: {{ .Values.service.secretAccessKeySecret.key }}
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.service.accessKeyIdSecret.name }}
                  key: {{ .Values.service.accessKeyIdSecret.key }}
            - name: SWOOP_BUCKET_NAME
              value: {{ .Values.service.bucketName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          name: {{ .Values.deployment.name }}
          ports:
            - containerPort: {{ .Values.container.port }}
            - containerPort: {{ .Values.container.servicePort }}
          resources: {}
          volumeMounts:
            - mountPath: /minio
              name: minio-claim0
          workingDir: /minio
      restartPolicy: Always
      volumes:
        - name: minio-claim0
          persistentVolumeClaim:
            claimName: minio-claim0
      {{- if (hasKey .Values.storage "nodeSelector")  }}
      {{- if (hasKey .Values.storage.nodeSelector "app")  }}
      nodeSelector:
        app: {{ .Values.storage.nodeSelector.app }}
      {{- end -}}
      {{- end -}}
status: {}
